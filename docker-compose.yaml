---
version: '3'

services:
  prometheus:
    image: docker.io/prom/prometheus
    volumes:
      - ./${PROMETHEUS_CONFIG:-configs/prometheus/prometheus.yml}:/etc/prometheus/prometheus.yml
      - ./${PROMETHEUS_RULES:-configs/prometheus/prometheus-rules.yml}:/etc/prometheus/prometheus-rules.yml
      - prometheus:/prometheus
    ports:
      - 9090:9090
    restart: always
    # This needs a newer Docker Compose (>= 1.28)
    #profiles: ["prometheus", "all"]

  alertmanager:
    image: docker.io/prom/alertmanager
    volumes:
      - ./${ALERTMANAGER_CONFIG:-configs/alertmanager/alertmanager.yml}:/etc/alertmanager/alertmanager.yml
      - alertmanager:/alertmanager
    ports:
      - 9093:9093
    command:
      - "--config.file=/etc/alertmanager/alertmanager.yml"
      - "--storage.path=/alertmanager"
    restart: always
    # This needs a newer Docker Compose (>= 1.28)
    #profiles: ["alertmanager", "all"]

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: grafana
      POSTGRES_DB: grafana
      POSTGRES_PASSWORD: ${GRAFANA_DATABASE_PASSWORD:-unsafe-password-please-change}
    volumes:
      - postgres:/var/lib/postgresql/data
    restart: always
    # This needs a newer Docker Compose (>= 1.28)
    #profiles: [ "grafana", "all" ]

  grafana:
    image: docker.io/grafana/grafana
    volumes:
      - ./${GRAFANA_PROVISIONING:-configs/grafana/provisioning}:/etc/grafana/provisioning
      - grafana:/var/lib/grafana
    environment:
      GF_DATABASE_TYPE: postgres
      GF_DATABASE_HOST: postgres
      GF_DATABASE_NAME: grafana
      GF_DATABASE_USER: grafana
      GF_DATABASE_PASSWORD: ${GRAFANA_DATABASE_PASSWORD:-unsafe-password-please-change}
    ports:
      - 3000:3000
    restart: always
    depends_on:
      - prometheus
      - postgres
    # This needs a newer Docker Compose (>= 1.28)
    #profiles: ["grafana", "all"]

  tor:
    image: "onionprobe/tor:1.0"
    build:
      context: .
      dockerfile: containers/tor/Dockerfile
    volumes:
      - ./scripts/generate-auth-keys-for-all-onion-services:/usr/local/bin/generate-auth-keys-for-all-onion-services
      - tor:/var/lib/tor
    restart: always
    # This needs a newer Docker Compose (>= 1.28)
    #profiles: ["tor", "all"]

  # Service that periodically compiles an Onionprobe configuration
  configurator:
    image: "onionprobe/onionprobe:1.0"
    build:
      context: .
      dockerfile: containers/onionprobe/Dockerfile
    tty: true
    stdin_open: true
    volumes:
      - .:/srv/onionprobe
    entrypoint: "/srv/onionprobe/${CONFIGURATOR_ENTRYPOINT:-packages/tpo.py}"
    command: "${CONFIGURATOR_PARAMS:---loop --wait 240 --config_overrides rounds=20 --config_template /srv/onionprobe/configs/tor.yaml --output_folder /srv/onionprobe/contrib}"
    user: "${CONTAINER_UID:-1000}:${CONTAINER_GID:-1000}"
    restart: always
    # This needs a newer Docker Compose (>= 1.28)
    #profiles: ["configurator", "all"]

  onionprobe:
    image: "onionprobe/onionprobe:1.0"
    build:
      context: .
      dockerfile: containers/onionprobe/Dockerfile
    tty: true
    stdin_open: true
    volumes:
      - .:/srv/onionprobe
    ports:
      - 9935:9935
    environment:
      ONIONPROBE_CONFIG: /srv/onionprobe/${ONIONPROBE_CONFIG:-contrib/tpo.yaml}
    restart: always
    depends_on:
      - configurator
    # This needs a newer Docker Compose (>= 1.28)
    #profiles: ["onionprobe", "all"]

volumes:
  prometheus: {}
  alertmanager: {}
  postgres: {}
  grafana: {}
  tor: {}
